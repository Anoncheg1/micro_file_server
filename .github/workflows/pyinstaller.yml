name: Package Application with Pyinstaller

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


jobs:
  build:
    runs-on: windows-2019

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
        architecture: 'x64'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install -r .github/requirements.txt
        pip install pyinstaller
        # idk what is build
    - name: Run PyInstaller
      run: |
        pyinstaller --onefile --collect-all flask --name micro-file-server micro_file_server/__main__.py
    - name: Create a Release
      env:
        GH_TOKEN: ${{ github.token }} # secrets.GITHUB_TOKEN github.token?
      shell: bash
      run: |
        ls ./*
        gh release create ${{ GITHUB.SHA }} --generate-notes micro_file_server/dist/*.exe
        # env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        # "$(date +%Y%m%d%H%M%S)" --generate-notes ./dist/*.exe
        # you may want to replace with special TOKEN
      # uses: elgohr/Github-Release-Action@v5
      # env:
      #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # with:
      #   title: MyReleaseMessage

    # - name: create release
    #     id: create_release
    #     uses: actions/create-release@v1
    #     env:
    #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     with:
    #       tag_name: ${{ github.event.head_commit.message }}
    #       release_name: ${{ github.event.head_commit.message }}
    #       overwrite: true
    #       body: |
    #         Test Release v1.0.0
    #       draft: false
    #       prerelease: false
    # - name: Build package
    #   run: python -m build
    # - uses: actions/upload-artifact@v2
    #   with:
    #     name: name-of-artifact
    #     path: dist/windows
